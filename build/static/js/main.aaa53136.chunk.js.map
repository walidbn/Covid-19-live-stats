{"version":3,"sources":["Components/NavBar.js","Components/CountrieCard.js","Components/DataTable.js","Pages/WorldCountries.js","Components/DataCard.js","Pages/Home.js","Pages/Symptoms.js","Pages/Graphs.js","Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Nav","justify","variant","Item","Link","to","Component","CountrieCard","this","props","countries","map","countrie","Card","className","style","width","marginTop","height","Img","src","countryInfo","flag","Body","Title","country","Text","parseInt","cases","toLocaleString","todayCases","active","recovered","todayRecovered","deaths","todayDeaths","tests","DataTable","Table","striped","bordered","hover","size","responsive","data","element","index","key","critical","WorldCountries","state","worldCountries","showed","handelChange","setState","console","log","axios","get","then","response","Button","onClick","marginRight","CardColumns","marginBottom","DataCard","margin","Header","icone","title","number","Home","general","global","lastUpdated","Date","updated","bg","React","Symptoms","Graphs","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aaa53136.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Nav } from 'react-bootstrap'\r\nimport { Link } from \"react-router-dom\";\r\nexport default class NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Nav\r\n\r\n                justify\r\n                variant=\"tabs\"\r\n\r\n            >\r\n                <Nav.Item>\r\n                    <Nav.Link ><Link to=\"/\">COVID-19 CORONAVIRUS PANDEMIC Stats</Link></Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link><Link to=\"/symptoms\">  Symptoms</Link></Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link><Link to=\"/graphs\">GRAPHS</Link></Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    <Nav.Link><Link to=\"/about\">About</Link></Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\n\r\n\r\nimport \"../Pages/WorldCountries.css\"\r\nexport default class CountrieCard extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                {this.props.countries.map(countrie =>\r\n\r\n\r\n                    <Card className=\"CountriesContainer\" style={{ width: '25em', marginTop: '8px', height: '100px' }}>\r\n                        <Card.Img variant=\"top\" src={countrie.countryInfo.flag} />\r\n                        <Card.Body>\r\n                            <Card.Title>{countrie.country}</Card.Title>\r\n                            <Card.Text>\r\n                                <p>Cases : {parseInt(countrie.cases).toLocaleString('en-US')} </p>\r\n                                <p>Today Cases : {parseInt(countrie.todayCases).toLocaleString('en-US')}</p>\r\n                                <p>Active  Cases : {parseInt(countrie.active).toLocaleString('en-US')}</p>\r\n                                <p>Recovred : {parseInt(countrie.recovered).toLocaleString('en-US')}</p>\r\n                                <p>Today Recovred : {parseInt(countrie.todayRecovered).toLocaleString('en-US')}</p>\r\n                                <p>Deaths : {parseInt(countrie.deaths).toLocaleString('en-US')}</p>\r\n                                <p>Today Deaths : {parseInt(countrie.todayDeaths).toLocaleString('en-US')}</p>\r\n                                <p>Total Tests : {parseInt(countrie.tests).toLocaleString('en-US')}</p>\r\n\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n\r\n                        <Card.Body>\r\n\r\n                        </Card.Body>\r\n                    </Card>\r\n\r\n                )}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Table from 'react-bootstrap/Table'\r\nimport ReactTable from 'react-table-6'\r\nimport 'react-table-6/react-table.css'\r\nexport default class DataTable extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Table striped bordered hover size=\"sm\" responsive=\"sm\">\r\n                <thead>\r\n                    <tr >\r\n                        <th>#</th>\r\n                        <th>Country</th>\r\n                        <th>Cases</th>\r\n                        <th>Today Cases</th>\r\n                        <th>Active</th>\r\n                        <th>Critical</th>\r\n                        <th>Deaths</th>\r\n                        <th>Today Deaths</th>\r\n                        <th>Recovered</th>\r\n                        <th>Today Recovered</th>\r\n                        <th>Tests</th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.data.map((element, index) => <tr>\r\n                        <td key={index}>{index + 1}</td>\r\n                        <td>{element.country}</td>\r\n                        <td>{element.cases}</td>\r\n                        <td>{element.todayCases}</td>\r\n                        <td>{element.active}</td>\r\n                        <td>{element.critical}</td>\r\n                        <td>{element.deaths}</td>\r\n                        <td>{element.todayDeaths}</td>\r\n                        <td>{element.recovered}</td>\r\n                        <td>{element.todayRecovered}</td>\r\n                        <td>{element.tests}</td>\r\n\r\n                    </tr>)}\r\n\r\n\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport CountrieCard from '../Components/CountrieCard';\r\nimport { Card, Col } from 'react-bootstrap';\r\nimport DataTable from '../Components/DataTable';\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./WorldCountries.css\"\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\nexport default class WorldCountries extends Component {\r\n    state = {\r\n        worldCountries: [],\r\n        showed: true\r\n\r\n    };\r\n\r\n    handelChange = () => {\r\n        this.setState({ showed: !this.state.showed })\r\n        console.log(this.state.showed)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://disease.sh/v3/covid-19/countries').then(response => {\r\n            this.setState({ worldCountries: response.data });\r\n\r\n        })\r\n\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                <Button variant=\"light\" onClick={this.handelChange} size=\"lg\" style={{ marginRight: '25px' }}> Show {!this.state.showed ? 'Table' : 'List'}</Button>\r\n\r\n                {this.state.showed ? <DataTable data={this.state.worldCountries} /> :\r\n\r\n                    <CardColumns style={{ marginBottom: '8px' }}>\r\n                        <CountrieCard countries={this.state.worldCountries} />\r\n                    </CardColumns>\r\n                }\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nexport default class DataCard extends Component {\r\n    state = {\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n        return (\r\n            <Card style={{ margin: '20px', width: '23%' }} >\r\n                <Card.Header><h3>{this.props.icone} {this.props.title}</h3></Card.Header>\r\n                <Card.Body>\r\n                    { /* We use parseInt(this.props.number).toLocaleString('en-US') to fromat number with 3 digit commas format*/}\r\n                    <Card.Title><h4>{parseInt(this.props.number).toLocaleString('en-US')\r\n                    }</h4></Card.Title>\r\n                    <Card.Text>\r\n\r\n                    </Card.Text>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport WorldCountries from './WorldCountries';\r\nimport DataCard from '../Components/DataCard';\r\nimport './Home.css';\r\n\r\nimport { AiOutlineFieldTime } from \"react-icons/ai\";\r\n\r\n\r\nimport { FcGlobe, FcCalendar, FcDislike, FcLike, FcDataRecovery, FcExpired, FcOvertime } from \"react-icons/fc\";\r\nexport default class Home extends React.Component {\r\n    state = {\r\n        general: [],\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        axios.get('https://disease.sh/v3/covid-19/all').then(response => {\r\n            this.setState({ general: response.data });\r\n            console.log(this.state.general)\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const global = [this.state.general];\r\n        const date = new Date(parseInt(this.state.general.updated));\r\n        const lastUpdated = date.toLocaleString('en-US');\r\n        return (\r\n\r\n            <div>\r\n                {global.map((element, index) =>\r\n                    <>\r\n                        <div className=\"GlobalContainer\">\r\n\r\n                            <DataCard key={index} title={'Golbal Cases'} icone={<FcGlobe />} number={element.cases} updated={element.updated} className=\"DataCardStyle \" />\r\n                            <DataCard title={'Today Cases'} icone={<FcCalendar />} number={element.todayCases} updated={element.updated} className=\"DataCardStyle\" />\r\n                            <DataCard title={'Deaths'} icone={<FcDislike />} number={element.deaths} updated={element.updated} className=\"DataCardStyle bg-danger\" />\r\n                            <DataCard title={'Today Deaths'} icone={<FcDislike />} number={element.todayDeaths} updated={element.updated} className=\"DataCardStyle\" />\r\n\r\n                        </div>\r\n\r\n\r\n                        <div className=\"GlobalContainer\">\r\n\r\n                            <DataCard title={'Total Recovered'} icone={<FcLike />} number={element.recovered} updated={element.updated} className=\"DataCardStyle\" bg={\"Danger\"} />\r\n                            <DataCard title={'Today Recovered'} icone={<FcLike />} number={element.todayRecovered} updated={element.updated} className=\"DataCardStyle\" />\r\n                            <DataCard title={'Active Cases'} icone={<FcExpired />} number={element.active} updated={element.updated} className=\"DataCardStyle\" />\r\n                            <DataCard title={'Critical Cases'} icone={<FcDataRecovery />} number={element.critical} updated={element.updated} className=\"DataCardStyle\" />\r\n\r\n                        </div>\r\n                        <WorldCountries />\r\n                        <h5>     <FcOvertime />        Last update since :  {lastUpdated}</h5>\r\n\r\n                    </>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Symptoms extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Hello from Symptoms page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Graphs extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Hello from graphs page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class About extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                hello from about page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport NavBar from './Components/NavBar'\nimport Home from './Pages/Home';\nimport Symptoms from './Pages/Symptoms'\nimport Graphs from './Pages/Graphs'\nimport About from './Pages/About'\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/symptoms\" component={Symptoms} />\n          <Route path=\"/graphs\" component={Graphs} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}